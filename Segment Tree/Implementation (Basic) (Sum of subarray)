#include <bits/stdc++.h>
using namespace std;


// Segment tree

// Merge
template <typename T> T merge(T ln, T rn){    // changable  
    return ln + rn;
}

// Build Tree
template <typename T, typename U> void build_tree(U &arr, vector<T> &tree, int start, int end, int cn){
    if(start == end){    // changable
        tree[cn] = arr[start];
        return;
    }
    
    int mid = (start+end)/2;
    build_tree(arr, tree, start, mid, 2*cn+1);
    build_tree(arr, tree, mid+1, end, 2*cn+2);
    tree[cn] = merge(tree[2*cn+1], tree[2*cn+2]);
}

// Update Tree
template <typename T, typename U, typename V> void update_tree(U &arr, vector<T> &tree, int start, int end, int cn, int index, V value){
    if(start == end){
        arr[index] = value;
        build_tree(arr, tree, start, start, cn);
        return;
    }
    
    int mid = (start+end)/2;
    if(index <= mid)    update_tree(arr, tree, start, mid, 2*cn+1, index, value);
    else    update_tree(arr, tree, mid+1, end, 2*cn+2, index, value);
    
    tree[cn] = merge(tree[2*cn+1], tree[2*cn+2]);
}

// Query
template <typename T> T query(vector<T> &tree, int start, int end, int cn, int left, int right){
    // Out of range             // changable
    if(start>right || end<left)    return 0;
    // Totally in range
    if(start>=left && end<=right)     return tree[cn];
    // Partially in range
    int mid = (start+end)/2;
    auto a = query(tree, start, mid, 2*cn+1, left, right);
    auto b = query(tree, mid+1, end, 2*cn+2, left, right);
    return merge(a, b);
}
// /


int main(){
    int n;    cin>>n;
    vector<int> arr(n);
    for(auto &i : arr)    cin>> i;
    
    vector<int> tree(4*n);
    build_tree(arr, tree, 0, n-1, 0);
    // for(auto i : tree)  cout<< i <<endl;
    
    int index, value;    cin>>index>>value;
    update_tree(arr, tree, 0, n-1, 0, index, value);
    
    int left, right;    cin>> left >> right;
    int ans = query(tree, 0, n-1, 0, left, right);
    
    cout<< ans <<endl;
}
